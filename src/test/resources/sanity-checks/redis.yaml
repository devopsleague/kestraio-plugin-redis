id: redis
namespace: sanitychecks

tasks:
  - id: init
    type: io.kestra.plugin.core.output.OutputValues
    values:
      randomPort: "{{ randomPort() }}"

  - id: dockerStart
    type: io.kestra.plugin.docker.Run
    containerImage: redis
    portBindings:
      - "{{ outputs.init.values.randomPort }}:6379"
    wait: false


  - id: set_json
    type: io.kestra.plugin.redis.string.Set
    serdeType: JSON
    key: "key_json_{{ execution.id }}"
    value: |
      {{ {
        "flow": flow.id,
        "namespace": flow.namespace
      } | toJson }}

  - id: get_json
    type: io.kestra.plugin.redis.string.Get
    serdeType: JSON
    key: "key_json_{{ execution.id }}"


  - id: assert_json
    type: io.kestra.plugin.core.execution.Assert
    errorMessage: "Invalid get data {{ outputs.get_json.data.flow }}"
    conditions:
      - "{{ outputs.get_json.data.flow == flow.id }}"
      - "{{ outputs.get_json.data.namespace == flow.namespace }}"

  - id: set_string
    type: io.kestra.plugin.redis.string.Set
    key: "key_string_{{ execution.id }}"
    value: "{{ flow.id }}"
    serdeType: STRING

  - id: get_string
    type: io.kestra.plugin.redis.string.Get
    key: "key_string_{{ execution.id }}"
    serdeType: STRING

  - id: assert_string
    type: io.kestra.plugin.core.execution.Assert
    errorMessage: "Invalid get data {{ outputs.get_string }}"
    conditions:
      - "{{ outputs.get_string.data == flow.id }}"

  - id: delete
    type: io.kestra.plugin.redis.string.Delete
    keys:
      - "key_string_{{ execution.id }}"

  - id: getAfterDelete
    type: io.kestra.plugin.redis.string.Get
    key: "key_string_{{ execution.id }}"
    serdeType: STRING

  - id: assertAfterDelete
    type: io.kestra.plugin.core.execution.Assert
    errorMessage: "Invalid get data {{ outputs.getAfterDelete }}"
    conditions:
      - "{{ (outputs.getAfterDelete contains 'data') == false }}"
  
  - id: push_json
    type: io.kestra.plugin.redis.list.ListPush
    serdeType: JSON
    key: "list_json_{{ execution.id }}"
    from:
      - |
        {{ {
          "flow": flow.id,
          "namespace": flow.namespace
        } | toJson }}

  - id: pop_json
    type: io.kestra.plugin.redis.list.ListPop
    serdeType: JSON
    key: "list_json_{{ execution.id }}"
    maxRecords: 1

  - id: assert
    type: io.kestra.plugin.core.execution.Assert
    errorMessage: "Invalid get data {{ outputs.pop_json }} with uri data {{ fromIon(read(outputs.pop_json.uri)) }}"
    conditions:
      - "{{ outputs.pop_json.count == 1 }}"
      - "{{ fromIon(read(outputs.pop_json.uri)).flow == flow.id }}"
      - "{{ fromIon(read(outputs.pop_json.uri)).namespace == flow.namespace }}"
  
  - id: push_string
    type: io.kestra.plugin.redis.list.ListPush
    key: "list_string_{{ execution.id }}"
    serdeType: STRING
    from:
      - "{{ execution.id }}"
      - "{{ flow.id }}"

  - id: pop_string
    type: io.kestra.plugin.redis.list.ListPop
    key: "list_string_{{ execution.id }}"
    serdeType: STRING
    maxRecords: 2

  - id: assert_list
    type: io.kestra.plugin.core.execution.Assert
    errorMessage: "Invalid get data {{ outputs.pop_string }}"
    conditions:
      - "{{ outputs.pop_string.count == 2 }}"
      - "{{ fromIon(read(outputs.pop_string.uri), allRows=true) contains execution.id }}"
      - "{{ fromIon(read(outputs.pop_string.uri), allRows=true) contains flow.id }}"

finally:
  - id: dockerStop
    type: io.kestra.plugin.docker.Stop
    containerId: "{{ outputs.dockerStart.taskRunner.containerId }}"
    
pluginDefaults:
  - type: io.kestra.plugin.redis
    values:
      url: redis://:redis@localhost:{{ outputs.init.values.randomPort }}/0